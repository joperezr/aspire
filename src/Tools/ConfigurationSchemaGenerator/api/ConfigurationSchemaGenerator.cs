//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace ConfigurationSchemaGenerator
{
    public partial class ConfigSchemaGenerator
    {
        public static void GenerateSchema(string inputAssembly, string[] references, string outputFile) { }
    }

    public sealed partial record SchemaGenerationSpec()
    {
        public required SourceGenerators.ImmutableEquatableArray<Microsoft.Extensions.Configuration.Binder.SourceGeneration.TypeSpec> AllTypes { get { throw null; } init { } }

        public required System.Collections.Generic.List<string>? ConfigurationPaths { get { throw null; } init { } }

        public required System.Collections.Generic.List<Microsoft.Extensions.Configuration.Binder.SourceGeneration.TypeSpec> ConfigurationTypes { get { throw null; } init { } }

        public required System.Collections.Generic.List<string>? ExclusionPaths { get { throw null; } init { } }

        public required System.Collections.Generic.List<string>? LogCategories { get { throw null; } init { } }
    }
}

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    public sealed partial record BindingHelperInfo()
    {
        public required bool EmitConfigurationKeyCaches { get { throw null; } init { } }

        public required MethodsToGen_CoreBindingHelper MethodsToGen { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<string> Namespaces { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<ComplexTypeSpec>? TypesForGen_BindCore { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<ComplexTypeSpec>? TypesForGen_BindCoreMain { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<TypeSpec>? TypesForGen_GetCore { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<TypeSpec>? TypesForGen_GetValueCore { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<ObjectSpec>? TypesForGen_Initialize { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<ParsableFromStringSpec>? TypesForGen_ParsePrimitive { get { throw null; } init { } }
    }

    public abstract partial record ComplexTypeSpec : TypeSpec
    {
        protected ComplexTypeSpec(CodeAnalysis.ITypeSymbol type) : base(default(CodeAnalysis.ITypeSymbol)!) { }
    }

    public sealed partial class ConfigurationBindingGenerator : CodeAnalysis.IIncrementalGenerator
    {
        public void Initialize(CodeAnalysis.IncrementalGeneratorInitializationContext context) { }
    }

    public sealed partial record InterceptorInfo()
    {
        public required SourceGenerators.ImmutableEquatableArray<InvocationLocationInfo>? ConfigBinder { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<TypedInterceptorInvocationInfo>? ConfigBinder_Bind_instance { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<TypedInterceptorInvocationInfo>? ConfigBinder_Bind_instance_BinderOptions { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<TypedInterceptorInvocationInfo>? ConfigBinder_Bind_key_instance { get { throw null; } init { } }

        public required MethodsToGen MethodsToGen { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<InvocationLocationInfo>? OptionsBuilderExt { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<InvocationLocationInfo>? ServiceCollectionExt { get { throw null; } init { } }

        public System.Collections.Generic.IEnumerable<InvocationLocationInfo>? GetInfo(MethodsToGen interceptor) { throw null; }
    }

    public sealed partial record InvocationLocationInfo
    {
        public InvocationLocationInfo(MethodsToGen interceptor, CodeAnalysis.Operations.IInvocationOperation invocation) { }

        public int CharacterNumber { get { throw null; } }

        public string FilePath { get { throw null; } }

        public MethodsToGen Interceptor { get { throw null; } }

        public int LineNumber { get { throw null; } }
    }

    public abstract partial record MemberSpec
    {
        public MemberSpec(CodeAnalysis.ISymbol member, SourceGenerators.TypeRef typeRef) { }

        public abstract bool CanGet { get; }
        public abstract bool CanSet { get; }

        public required string ConfigurationKeyName { get { throw null; } init { } }

        public string DefaultValueExpr { get { throw null; } protected set { } }

        public string Name { get { throw null; } }

        public SourceGenerators.TypeRef TypeRef { get { throw null; } }
    }

    [System.Flags]
    public enum MethodsToGen
    {
        None = 0,
        ConfigBinder_Bind_instance = 1,
        ConfigBinder_Bind_instance_BinderOptions = 2,
        ConfigBinder_Bind_key_instance = 4,
        ConfigBinder_Bind = 7,
        ConfigBinder_Get_T = 8,
        ConfigBinder_Get_T_BinderOptions = 16,
        ConfigBinder_Get_TypeOf = 32,
        ConfigBinder_Get_TypeOf_BinderOptions = 64,
        ConfigBinder_Get = 120,
        ConfigBinder_GetValue_TypeOf_key = 128,
        ConfigBinder_GetValue_TypeOf_key_defaultValue = 256,
        ConfigBinder_GetValue_T_key = 512,
        ConfigBinder_GetValue_T_key_defaultValue = 1024,
        ConfigBinder_GetValue = 1920,
        ConfigBinder_Any = 2047,
        OptionsBuilderExt_Bind_T = 2048,
        OptionsBuilderExt_Bind_T_BinderOptions = 4096,
        OptionsBuilderExt_Bind = 6144,
        OptionsBuilderExt_BindConfiguration = 8192,
        OptionsBuilderExt_BindConfiguration_T_path_BinderOptions = 8192,
        OptionsBuilderExt_Any = 14336,
        ServiceCollectionExt_Configure_T = 16384,
        ServiceCollectionExt_Configure_T_name = 32768,
        ServiceCollectionExt_Configure_T_BinderOptions = 65536,
        ServiceCollectionExt_Configure_T_name_BinderOptions = 131072,
        ServiceCollectionExt_Any = 245760,
        ServiceCollectionExt_Configure = 245760,
        Any = 262143
    }

    [System.Flags]
    public enum MethodsToGen_CoreBindingHelper
    {
        None = 0,
        BindCore = 1,
        GetCore = 2,
        GetValueCore = 4,
        BindCoreMain = 8,
        Initialize = 16,
        HasValueOrChildren = 32,
        AsConfigWithChildren = 64,
        ParsePrimitive = 128
    }

    public enum NotSupportedReason
    {
        UnknownType = 1,
        MissingPublicInstanceConstructor = 2,
        CollectionNotSupported = 3,
        DictionaryKeyNotSupported = 4,
        ElementTypeNotSupported = 5,
        MultipleParameterizedConstructors = 6,
        MultiDimArraysNotSupported = 7,
        NullableUnderlyingTypeNotSupported = 8
    }

    public enum ObjectInstantiationStrategy
    {
        None = 0,
        ParameterlessConstructor = 1,
        ParameterizedConstructor = 2
    }

    public sealed partial record ObjectSpec : ComplexTypeSpec
    {
        public ObjectSpec(CodeAnalysis.INamedTypeSymbol type, ObjectInstantiationStrategy instantiationStrategy, SourceGenerators.ImmutableEquatableArray<PropertySpec>? properties, SourceGenerators.ImmutableEquatableArray<ParameterSpec>? constructorParameters, string? initExceptionMessage) : base(default(CodeAnalysis.ITypeSymbol)!) { }

        public SourceGenerators.ImmutableEquatableArray<ParameterSpec>? ConstructorParameters { get { throw null; } }

        public string? InitExceptionMessage { get { throw null; } }

        public ObjectInstantiationStrategy InstantiationStrategy { get { throw null; } }

        public SourceGenerators.ImmutableEquatableArray<PropertySpec>? Properties { get { throw null; } }
    }

    public sealed partial record ParameterSpec : MemberSpec
    {
        public ParameterSpec(CodeAnalysis.IParameterSymbol parameter, SourceGenerators.TypeRef typeRef) : base(default!, default!) { }

        public override bool CanGet { get { throw null; } }

        public override bool CanSet { get { throw null; } }

        public bool ErrorOnFailedBinding { get { throw null; } }

        public CodeAnalysis.RefKind RefKind { get { throw null; } }
    }

    public sealed partial record ParsableFromStringSpec : SimpleTypeSpec
    {
        public ParsableFromStringSpec(CodeAnalysis.ITypeSymbol type) : base(default(CodeAnalysis.ITypeSymbol)!) { }

        public required StringParsableTypeKind StringParsableTypeKind { get { throw null; } init { } }
    }

    public sealed partial record PropertySpec : MemberSpec
    {
        public PropertySpec(CodeAnalysis.IPropertySymbol property, SourceGenerators.TypeRef typeRef) : base(default!, default!) { }

        public override bool CanGet { get { throw null; } }

        public override bool CanSet { get { throw null; } }

        public bool IsStatic { get { throw null; } }

        public ParameterSpec? MatchingCtorParam { get { throw null; } set { } }

        public bool SetOnInit { get { throw null; } }
    }

    public abstract partial record SimpleTypeSpec : TypeSpec
    {
        public SimpleTypeSpec(CodeAnalysis.ITypeSymbol type) : base(default(CodeAnalysis.ITypeSymbol)!) { }
    }

    public sealed partial record SourceGenerationSpec()
    {
        public required BindingHelperInfo BindingHelperInfo { get { throw null; } init { } }

        public required SourceGenerators.ImmutableEquatableArray<TypeSpec> ConfigTypes { get { throw null; } init { } }

        public required bool EmitEnumParseMethod { get { throw null; } set { } }

        public required bool EmitGenericParseEnum { get { throw null; } set { } }

        public required bool EmitThrowIfNullMethod { get { throw null; } set { } }

        public required InterceptorInfo InterceptorInfo { get { throw null; } init { } }
    }

    public enum StringParsableTypeKind
    {
        None = 0,
        AssignFromSectionValue = 1,
        Enum = 2,
        ByteArray = 3,
        Integer = 4,
        Float = 5,
        Parse = 6,
        ParseInvariant = 7,
        CultureInfo = 8,
        Uri = 9
    }

    public sealed partial record TypedInterceptorInvocationInfo(ComplexTypeSpec TargetType, SourceGenerators.ImmutableEquatableArray<InvocationLocationInfo> Locations)
    {
        public sealed partial class Builder
        {
            public Builder(MethodsToGen Overload, ComplexTypeSpec TargetType) { }

            public void RegisterInvocation(CodeAnalysis.Operations.IInvocationOperation invocation) { }

            public TypedInterceptorInvocationInfo ToIncrementalValue() { throw null; }
        }
    }

    [System.Diagnostics.DebuggerDisplay("Name={DisplayString}, Kind={SpecKind}")]
    public abstract partial record TypeSpec
    {
        public TypeSpec(CodeAnalysis.ITypeSymbol type) { }

        public string DisplayString { get { throw null; } }

        public SourceGenerators.TypeRef EffectiveTypeRef { get { throw null; } protected init { } }

        public string FullName { get { throw null; } }

        public string IdentifierCompatibleSubstring { get { throw null; } }

        public bool IsValueType { get { throw null; } }

        public SourceGenerators.TypeRef TypeRef { get { throw null; } }
    }
}

namespace SourceGenerators
{
    public sealed partial class ImmutableEquatableArray<T> : System.IEquatable<ImmutableEquatableArray<T>>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection<T> where T : System.IEquatable<T>
    {
        public ImmutableEquatableArray(System.Collections.Generic.IEnumerable<T> values) { }

        public int Count { get { throw null; } }

        public static ImmutableEquatableArray<T> Empty { get { throw null; } }

        public T this[int index] { get { throw null; } }

        public bool Equals(ImmutableEquatableArray<T>? other) { throw null; }

        public override bool Equals(object? obj) { throw null; }

        public Enumerator GetEnumerator() { throw null; }

        public override int GetHashCode() { throw null; }

        System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { throw null; }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

        public partial struct Enumerator
        {
            private object _dummy;
            private int _dummyPrimitive;
            public T Current { get { throw null; } }

            public bool MoveNext() { throw null; }
        }
    }

    [System.Diagnostics.DebuggerDisplay("Name = {Name}")]
    public sealed partial class TypeRef : System.IEquatable<TypeRef>
    {
        public TypeRef(Microsoft.CodeAnalysis.ITypeSymbol type) { }

        public bool CanBeNull { get { throw null; } }

        public string FullyQualifiedName { get { throw null; } }

        public bool IsValueType { get { throw null; } }

        public string Name { get { throw null; } }

        public Microsoft.CodeAnalysis.SpecialType SpecialType { get { throw null; } }

        public Microsoft.CodeAnalysis.TypeKind TypeKind { get { throw null; } }

        public bool Equals(TypeRef? other) { throw null; }

        public override bool Equals(object? obj) { throw null; }

        public override int GetHashCode() { throw null; }
    }
}